//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MouseControl"",
            ""id"": ""53fdf5e6-76c1-4952-a899-91d5db417180"",
            ""actions"": [
                {
                    ""name"": ""Inhale"",
                    ""type"": ""Button"",
                    ""id"": ""c82daca3-2f07-47f8-bbae-ec2e6f759689"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exhale"",
                    ""type"": ""Button"",
                    ""id"": ""d279bf17-a9ae-4c27-99a2-932d49fdb472"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb9dce3c-4d77-465f-93ab-c29519e2a583"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inhale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11bfd79f-1f09-422e-8120-a76250436be6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exhale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MainControlScheme"",
            ""bindingGroup"": ""MainControlScheme"",
            ""devices"": []
        },
        {
            ""name"": ""MainControls"",
            ""bindingGroup"": ""MainControls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MouseControl
        m_MouseControl = asset.FindActionMap("MouseControl", throwIfNotFound: true);
        m_MouseControl_Inhale = m_MouseControl.FindAction("Inhale", throwIfNotFound: true);
        m_MouseControl_Exhale = m_MouseControl.FindAction("Exhale", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseControl
    private readonly InputActionMap m_MouseControl;
    private IMouseControlActions m_MouseControlActionsCallbackInterface;
    private readonly InputAction m_MouseControl_Inhale;
    private readonly InputAction m_MouseControl_Exhale;
    public struct MouseControlActions
    {
        private @PlayerInput m_Wrapper;
        public MouseControlActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inhale => m_Wrapper.m_MouseControl_Inhale;
        public InputAction @Exhale => m_Wrapper.m_MouseControl_Exhale;
        public InputActionMap Get() { return m_Wrapper.m_MouseControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseControlActions set) { return set.Get(); }
        public void SetCallbacks(IMouseControlActions instance)
        {
            if (m_Wrapper.m_MouseControlActionsCallbackInterface != null)
            {
                @Inhale.started -= m_Wrapper.m_MouseControlActionsCallbackInterface.OnInhale;
                @Inhale.performed -= m_Wrapper.m_MouseControlActionsCallbackInterface.OnInhale;
                @Inhale.canceled -= m_Wrapper.m_MouseControlActionsCallbackInterface.OnInhale;
                @Exhale.started -= m_Wrapper.m_MouseControlActionsCallbackInterface.OnExhale;
                @Exhale.performed -= m_Wrapper.m_MouseControlActionsCallbackInterface.OnExhale;
                @Exhale.canceled -= m_Wrapper.m_MouseControlActionsCallbackInterface.OnExhale;
            }
            m_Wrapper.m_MouseControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inhale.started += instance.OnInhale;
                @Inhale.performed += instance.OnInhale;
                @Inhale.canceled += instance.OnInhale;
                @Exhale.started += instance.OnExhale;
                @Exhale.performed += instance.OnExhale;
                @Exhale.canceled += instance.OnExhale;
            }
        }
    }
    public MouseControlActions @MouseControl => new MouseControlActions(this);
    private int m_MainControlSchemeSchemeIndex = -1;
    public InputControlScheme MainControlSchemeScheme
    {
        get
        {
            if (m_MainControlSchemeSchemeIndex == -1) m_MainControlSchemeSchemeIndex = asset.FindControlSchemeIndex("MainControlScheme");
            return asset.controlSchemes[m_MainControlSchemeSchemeIndex];
        }
    }
    private int m_MainControlsSchemeIndex = -1;
    public InputControlScheme MainControlsScheme
    {
        get
        {
            if (m_MainControlsSchemeIndex == -1) m_MainControlsSchemeIndex = asset.FindControlSchemeIndex("MainControls");
            return asset.controlSchemes[m_MainControlsSchemeIndex];
        }
    }
    public interface IMouseControlActions
    {
        void OnInhale(InputAction.CallbackContext context);
        void OnExhale(InputAction.CallbackContext context);
    }
}
